{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Living Architecture Systems Description","text":"<p>The Living Architecture Sculpture Description (LASD) is a light weight framework to describe the components and assemblies that make up Living Architecture Systems Group (LASG) testbeds. This framework describes the lexicon of components and hierarchy of assemblies that comprise a sculpture, they physical layout of those assemblies, as well as the topology of the sensors, actuators and microprocessors that bring a testbed to life.</p> <p>The LASD framework has been used to facilitate the transfer of digital models of LASG Testbeds between a variety of Digital Content Creation (DCC) tools, such as Rhino, Blender, \\&amp; Unreal Engine, as well provide data for the LASG's own Testbed-Control System, which drives the behavior of LASG Testbeds.</p> <p></p>"},{"location":"cloning/","title":"Repository Setup","text":""},{"location":"cloning/#cloning-the-lasd-repository","title":"Cloning the LASD Repository","text":"<p>Version Control for the Living Architecture Sculpture Description is managed through GitHub. The best method to get access to the LASD and the software specific toolkits that accompany it is to clone the projects Github repository. </p> <p>This will allow you to keep up to date with the projects ongoing development.</p> <p>The most user friendly method to manage a cloned repository is through the GitHub Desktop Application. Once you have GitHub Desktop installed, you can use the clone repository command (File &gt; Clone Repository, or Ctrl + Shift + O) and enter the Repository's URL to clone it to a folder on your computer (https://github.com/pbarch/Living_Architecture_Sculpture_Description.git)</p> <p>Once you've cloned the repository you can update your version of the LASD project with the \"Fetch Origin\" &amp; \"Pull Origin\" commands in GitHub Desktop.</p> <p></p>"},{"location":"blender/blender_install/","title":"Blender Install","text":""},{"location":"blender/blender_install/#installing-the-lasd-toolkit-blender","title":"Installing the LASD Toolkit - Blender","text":""},{"location":"blender/blender_install/#1-run-the-install-script","title":"1) Run the Install Script:","text":"<p>To install the LASD toolkit for Blender, navigate to the folder where you have cloned the LASD Repository. Within this folder you should find the LASD_Blender_Install.bat file, located at:</p> <p>%Your_Chosen_Folder%\\Living_Architecture_Sculpture_Description</p> <p>\\BlenderAddon\\LASD_Blender_Install.bat</p> <p>Right click the batch file and select \"Run as Administrator\". The batch file will prompt you to enter the Blender version you're installing to. Entering your Blender version number and hitting enter will create a symbolic link (symlink) for the Add-on in Blender Add-on's directory. Using a symbolic link allows the LASD toolkit to stay up to date when updating from GitHub Desktop.</p>"},{"location":"blender/blender_install/#2-activate-the-add-on","title":"2) Activate the Add-on:","text":"<p>Open Blender and go to the User Preferences (Edit &gt; Preferences). Select the Add-ons tab and search for the \"Living Architecture Sculpture Description\" Add-on. Click the checkbox to enable it.</p> <p>With the addon enabled you should now have an LASD tab in the 3D view toolbar, as well as LASD specific instance and collection properties available in the properties menu.</p>"},{"location":"blender/blender_install/#optional-blender-add-ons-directory","title":"Optional: Blender Add-ons directory","text":"<p>If you need to delete the LASD toolkit from Blender, the location that the batch file creates the symbolic link in is:</p> <p>%UserProfile%\\AppData\\Roaming\\Blender Foundation\\Blender\\%Version Number%\\scripts\\addons\\io_lasd</p> <p></p>"},{"location":"godot/godot_install/","title":"Godot Install","text":""},{"location":"godot/godot_install/#installing-the-lasd-toolkit-godot","title":"Installing the LASD Toolkit - Godot","text":""},{"location":"godot/godot_install/#1-add-or-link-to-your-projects-addons","title":"1) Add or link to your projects addons:","text":"<p>Copy or create a symlink of LASD_Toolkit directory in the \"addons\" folder of your Godot Project.</p> <p>To create a symlink, open an administrator command prompt in the Godot Addon folder of the repo, and use the following command:</p> <p>''' mklink /D \" \\addons\\LASDToolkit\" \"\\Godot Addon\\LASDToolkit\" '''"},{"location":"godot/godot_install/#2-enable-the-addon","title":"2) Enable the Addon:","text":"<p>Under Project Settings -&gt; Plugins, enable the addon</p> <p></p>"},{"location":"rhino/rhino_install/","title":"Rhino Install","text":""},{"location":"rhino/rhino_install/#installing-the-lasd-toolkit-rhino","title":"Installing the LASD Toolkit - Rhino","text":""},{"location":"rhino/rhino_install/#1-run-the-install-script","title":"1) Run the Install Script:","text":"<p>To install the LASD toolkit for Rhino, navigate to the folder where you have cloned the LASD Repository. Within this folder you should find the LASD_Rhino_Install.bat file, located at:</p> <p>%Your_Chosen_Folder%\\Living_Architecture_Sculpture_Description</p> <p>\\RhinoScript\\LASD_Rhino_Install.bat</p> <p>Right click the batch file and select \"Run as Administrator\". The batch file will prompt you to enter the Rhino version you're installing to (6.0 or 7.0). Entering your Rhino version number and hitting enter will create a symbolic link (symlink) for the Plug-in in the Rhino Plug-In's directory. Using a symbolic link allows the LASD toolkit to stay up to date when updating from GitHub Desktop.</p> <p></p>"},{"location":"rhino/rhino_install/#2-start-python-in-rhino","title":"2) Start Python in Rhino:","text":"<p>Open up Rhino and run the command \"EditPythonScript\", and then close the window that opens. This command needs to be run once to make sure Rhino has started python, otherwise plugin commands will not appear in the command bar.</p>"},{"location":"rhino/rhino_install/#3-use-an-lasd-command","title":"3) Use an LASD Command:","text":"<p>The following commands are available in Rhino:</p> <p>ImportLASD : Imports an LASD .json file</p> <p>ExportLASD: Exports an LASD .json file</p> <p>CreateLayersLASD: Creates an LASD Layer structure, with Sculpture, Lexicon and Level of Detail Layers</p> <p>BlockLASD: A wrapper for Rhino's normal Block command, this makes a block and automatically adds a copy of it to a named layer in the appropriate Lexicon section</p> <p>DeviceLASD: Opens the UI to add or edit device data on blocks that represents sensors, actuators, nodes or RPis</p> <p></p>"},{"location":"rhino/rhino_install/#optional-rhino-plug-ins-directory","title":"Optional: Rhino  Plug-ins directory","text":"<p>If you need to delete the LASD toolkit from Rhino, the location that the batch file creates the symbolic link in is:</p> <p>For Rhino 7:</p> <p>%UserProfile%\\AppData\\Roaming\\McNeel\\Rhinoceros\\Plug-ins\\PythonPlugins\\LASDManager{fd72a2df-89d1-42e5-a465-9059768362ce}</p> <p>For Rhino 6:</p> <p>\"%UserProfile%\\AppData\\Roaming\\McNeel\\Rhinoceros\\Plug-ins\\LASDManager {fd72a2df-89d1-42e5-a465-9059768362ce}\"</p> <p></p>"},{"location":"testbed_control/tc_install/","title":"Use with Testbed Control","text":""},{"location":"testbed_control/tc_install/#using-an-lasd-file-in-testbed-control","title":"Using an LASD file in TestBed-Control","text":"<p>To Use an LASD file in TestBed-Control, the following keys need to be added to the options.json configuration file.</p>"},{"location":"testbed_control/tc_install/#file_namefuturium_refresh","title":"\"file_name\":\"Futurium_Refresh\",:","text":"<p>Make sure the file name specified here matches the filename of your LASD .json file</p>"},{"location":"testbed_control/tc_install/#use_lasd_devices-true","title":"\"use_lasd_devices\" : \"true\",:","text":"<p>A true or false value. Setting this to true will load device data from the \"Testbed-Control\\Simulator\\LASD_Data\" folder. Setting this to false will fall back to loading device data from a device locator.csv file</p>"},{"location":"testbed_control/tc_install/#use_lasd_gridrunner-true","title":"\"use_lasd_gridrunner\" : \"true\",:","text":"<p>A true or false value. Setting this to true will create gridrunner verts from the optional gridrunner key in an LASD file. Setting this to false will fall back to creating gridrunner verts from a gridrunner.json file</p>"},{"location":"testbed_control/tc_install/#use_lasd_modeltrue","title":"\"use_lasd_model\":\"true\",:","text":"<p>A true or false value. Setting this to True will use the primitive data on the LASD Lexicon elements to construct the low poly sculpture model from the LASD data. Setting this to false will fall back to loading the sculpture model from a .obj file.</p> <p>Additionally an optional key can be provided:</p>"},{"location":"testbed_control/tc_install/#lasd_data_pathyourpathtoanlasdfile","title":"\"LASD_data_path\":\"\\&lt;Your\\Path\\To\\An\\LASD\\File&gt;\":","text":"<p>This will override the default behavior of loading the LASD file located at \"Testbed-Control\\Simulator\\LASD_Data\", and instead loads the LASD file from the specified path. This can useful when testing and iterating on files, as this path can be set to your DCC's LASD export path, allowing the Test-Bed control data to update to newly exported data automatically on restart, without needing to copy the exported LASD file into the \"Testbed-Control\\Simulator\\LASD_Data\" folder.</p> <p>\\pagebreak</p>"},{"location":"unreal/unreal_script/","title":"Unreal Engine Script","text":""},{"location":"unreal/unreal_script/#installing-the-lasd-toolkit-unreal-engine","title":"Installing the LASD Toolkit - Unreal Engine","text":"<p>To enable the use of the LASD import script in an Unreal Engine Project:</p>"},{"location":"unreal/unreal_script/#1-enable-python-scripting-in-unreal-engine","title":"1) Enable Python Scripting in Unreal Engine:","text":"<p>To enable python scripts in Unreal Engine, go to Edit - &gt; Plug-Ins, and under the \"Built-in\" section of the browser select \"Scripting\". Ensure that \"Editor Scripting Utilities\", \"Python Editor Script Plugin\", and \"Sequencer Scripting\" are all enabled. Once all three are enabled, Unreal will prompt you to restart the engine.</p> <p></p>"},{"location":"unreal/unreal_script/#2-provide-unreal-the-path-to-the-lasd-import-script","title":"2) Provide Unreal the Path to the LASD Import Script:","text":"<p>Go to Edit -&gt; Project Settings, and under the \"Plugins\" section of the browser select \"Python\". Next to the Additional Paths field click the plus button to add a path to a python script. In the text box that appears enter the path to the \"Unreal_Importer\" folder in the LASD Repository. Once you've entered the path, Unreal will prompt you to restart the engine.</p> <p></p>"},{"location":"unreal/unreal_script/#3-enable-the-output-log","title":"3) Enable the Output Log:","text":"<p>Under Window -&gt; Developer Tools, Enable the Output Log. Select the Output Log (it should appear as a tab next to the Content Browser). WIth the Output Log open, change the log's mode from \"Cmd\" to \"Python\" by selecting \"Python\" in the menu at the bottom left of the Output Log</p>"},{"location":"unreal/unreal_script/#4-load-and-run-the-import-script","title":"4) Load and Run the Import Script:","text":"<p>In the text box of the Output Log, enter the following commands:</p>"},{"location":"unreal/unreal_script/#import-unreallasdimport-as-lasd","title":"import UnrealLASDImport as LASD","text":"<p>This will load the python module defined by the import script.</p>"},{"location":"unreal/unreal_script/#lasdimportlasdryourpathtoanlasdfile","title":"\"LASD.importLASD(r\"\\&lt;\\Your\\Path\\To\\An\\LASD\\File&gt;\")\"","text":"<p>This will run the import function to import the LASD file at the path you provide. The import function can be run with a number of optional arguments as well, which can be added, seperated by a comma, after the file path.</p> <p>The optional arguments are:</p>"},{"location":"unreal/unreal_script/#import_only-false","title":"import_only = False,:","text":"<p>A True or False value, if True, the import function will only import the assets from the Lexicon Mesh Library, and will not populate the scene</p>"},{"location":"unreal/unreal_script/#populate_only-false","title":"populate_only = False,:","text":"<p>A True or False value, if True, the import function will only populate the scene from already imported assets in the Unreal Project.</p>"},{"location":"unreal/unreal_script/#uv_only-false","title":"uv_only= False,:","text":"<p>A True or False value, if True, the import function will only UV unwrap assets already in the Unreal Project</p>"},{"location":"unreal/unreal_script/#num_batches5","title":"num_batches=5,:","text":"<p>An Integer value, splits the scene population process into a number of batches. This reduces RAM usage, which can be quite high during scene population</p>"},{"location":"unreal/unreal_script/#batchall","title":"batch=\"all\":","text":"<p>Can be either a range \"[0,2]\" or \"all\". If a range is specified, only those batches will be imported this time the script runs. This further reduces RAM usage if necessary.</p> <p>Note</p> <p>All Optional arguments default to the values listed above. If you aren't experiencing crashes due to High RAM usage, you can leave these optional arguments out and the import function will run all of these operations in sequence.</p> <p></p>"}]}